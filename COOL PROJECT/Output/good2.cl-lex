1: lexer: CLASS: class
1: lexer: TYPEID: Main
1: lexer: OBJECTID: inherits
1: lexer: TYPEID: IO
1: lexer: LBRACE: {
2: lexer: OBJECTID: pal
2: lexer: LPAREN: (
2: lexer: OBJECTID: s
2: lexer: COLON: :
2: lexer: TYPEID: String
2: lexer: RPAREN: )
2: lexer: COLON: :
2: lexer: TYPEID: Bool
2: lexer: LBRACE: {
3: lexer: IF: if
3: lexer: OBJECTID: s
3: lexer: DOT: .
3: lexer: OBJECTID: length
3: lexer: LPAREN: (
3: lexer: RPAREN: )
3: lexer: EQUALS: =
3: lexer: INT_CONST: 0
4: lexer: THEN: then
4: lexer: BOOL_CONST: true
5: lexer: ELSE: else
5: lexer: IF: if
5: lexer: OBJECTID: s
5: lexer: DOT: .
5: lexer: OBJECTID: length
5: lexer: LPAREN: (
5: lexer: RPAREN: )
5: lexer: EQUALS: =
5: lexer: INT_CONST: 1
6: lexer: THEN: then
6: lexer: BOOL_CONST: true
7: lexer: ELSE: else
7: lexer: IF: if
7: lexer: OBJECTID: s
7: lexer: DOT: .
7: lexer: OBJECTID: substr
7: lexer: LPAREN: (
7: lexer: INT_CONST: 0
7: lexer: COMMA: ,
7: lexer: INT_CONST: 1
7: lexer: RPAREN: )
7: lexer: EQUALS: =
7: lexer: OBJECTID: s
7: lexer: DOT: .
7: lexer: OBJECTID: substr
7: lexer: LPAREN: (
7: lexer: OBJECTID: s
7: lexer: DOT: .
7: lexer: OBJECTID: length
7: lexer: LPAREN: (
7: lexer: RPAREN: )
7: lexer: MINUS: -
7: lexer: INT_CONST: 1
7: lexer: COMMA: ,
7: lexer: INT_CONST: 1
7: lexer: RPAREN: )
8: lexer: THEN: then
8: lexer: OBJECTID: pal
8: lexer: LPAREN: (
8: lexer: OBJECTID: s
8: lexer: DOT: .
8: lexer: OBJECTID: substr
8: lexer: LPAREN: (
8: lexer: INT_CONST: 1
8: lexer: COMMA: ,
8: lexer: OBJECTID: s
8: lexer: DOT: .
8: lexer: OBJECTID: length
8: lexer: LPAREN: (
8: lexer: RPAREN: )
8: lexer: MINUS: -
8: lexer: INT_CONST: 2
8: lexer: RPAREN: )
8: lexer: RPAREN: )
9: lexer: ELSE: else
9: lexer: BOOL_CONST: false
10: lexer: FI: fi
10: lexer: FI: fi
10: lexer: FI: fi
11: lexer: RBRACE: }
11: lexer: SEMICOLON: ;
13: lexer: OBJECTID: main
13: lexer: LPAREN: (
13: lexer: RPAREN: )
13: lexer: COLON: :
13: lexer: TYPEID: SELF_TYPE
13: lexer: LBRACE: {
14: lexer: OBJECTID: out_string
14: lexer: LPAREN: (
14: lexer: STRING: "enter a string ? "
14: lexer: RPAREN: )
14: lexer: SEMICOLON: ;
15: lexer: IF: if
15: lexer: OBJECTID: pal
15: lexer: LPAREN: (
15: lexer: OBJECTID: in_string
15: lexer: LPAREN: (
15: lexer: RPAREN: )
15: lexer: RPAREN: )
16: lexer: THEN: then
16: lexer: OBJECTID: out_string
16: lexer: LPAREN: (
16: lexer: STRING: "that was a palindrome\n"
16: lexer: RPAREN: )
17: lexer: ELSE: else
17: lexer: OBJECTID: out_string
17: lexer: LPAREN: (
17: lexer: STRING: "that was not a palindrome\n"
17: lexer: RPAREN: )
18: lexer: FI: fi
18: lexer: SEMICOLON: ;
19: lexer: RBRACE: }
19: lexer: SEMICOLON: ;
20: lexer: RBRACE: }
20: lexer: SEMICOLON: ;
